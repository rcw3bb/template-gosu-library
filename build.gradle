import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url 'https://repo.ronella.xyz/artifactory/java-central/'
            credentials {
                username "${artifactoryUsername}"
                password "${artifactoryPassword}"
            }
        }
    }
    dependencies {
        classpath fileTree(dir: './libs/plugins', include: ['*.jar'])
        classpath group: 'org.codenarc', name: 'CodeNarc', version: '1.5'
        classpath group: 'xyz.ronella.gosu', name: 'gs-codenarc-ext', version: '1.0.0'
    }
}

apply plugin: "org.gosu-lang.gosu"

sourceCompatibility = 1.11

repositories {
    maven {
        url 'https://repo.ronella.xyz/artifactory/java-central/'
        credentials {
            username "${artifactoryUsername}"
            password "${artifactoryPassword}"
        }
    }
}

dependencies {
    compile group: 'org.gosu-lang.gosu', name: 'gosu-core', version: "${gosuVersion}"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile fileTree(dir: './libs/main', include: ['*.jar'])

    testCompile group: 'org.gosu-lang.gosu', name: 'gosu-test', version: "${gosuVersion}"
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
    testCompile fileTree(dir: './libs/test', include: ['*.jar'])
}

task preparePackage(dependsOn: [jar]) {
    doLast {
        def srcDir = sourceSets.main.gosu.sourceDirectories.asPath
        def destDir = Paths.get(buildDir.absolutePath, "gosu")

        copy {
            from srcDir
            into destDir
        }
    }
}

task jarGosu(dependsOn: [preparePackage]) {
    group = 'Gosu Plugin'
    doLast {
        def srcDir = Paths.get(buildDir.absolutePath, "gosu")
        def jarFilename ="${project.name}-${version}"
        def jarGosuFile = "${jarFilename}-gosu.jar"
        def javaLibsDir = Paths.get(buildDir.absolutePath, "java-libs")
        def gosuLibsDir = Paths.get(buildDir.absolutePath, "gosu-libs")
        def outputGosuFile = Paths.get(gosuLibsDir.toFile().absolutePath, jarGosuFile)
        def libsDir = Paths.get(buildDir.absolutePath, "libs")
        def outputFile = Paths.get(libsDir.toFile().absolutePath, "${jarFilename}.jar")

        ant.zip(destfile: outputGosuFile) {
            fileset(dir: srcDir)
        }

        ant.move file: outputFile, toDir: javaLibsDir

        copy {
            from outputGosuFile
            into libsDir
            rename { filename ->
                filename.replace jarGosuFile, "${jarFilename}.jar"
            }
        }
    }
}

jar.finalizedBy(jarGosu)

ant.taskdef(name: 'codenarcGosu', classname: 'org.codenarc.ant.CodeNarcTask') {
    classpath {
        buildscript.configurations.classpath.files.each { ___file ->
            fileset(file: ___file)
        }
    }
}

task codenarcMainGosu {
    doLast {
        ant.codenarcGosu(ruleSetFiles: file("${projectDir}/config/codenarc/codenarc.xml").toURI().toString(),
                maxPriority1Violations: maxPriority1Violations,
                maxPriority2Violations: maxPriority2Violations,
                maxPriority3Violations: maxPriority3Violations) {
            report(type: 'html') {
                option(name: "outputFile", value: "${buildDir}/reports/codenarc/main/codenarc.html")
                option(name: "title", value: "Gosu Library Report")
            }
            sourceSets.main.allGosu.srcDirs.each { ___file ->
                fileset(dir: ___file)
            }
        }
    }
}
