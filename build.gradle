import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url 'https://repo.ronella.xyz/artifactory/java-central/'
            credentials {
                username "${artifactoryUsername}"
                password "${artifactoryPassword}"
            }
            mavenContent {
                releasesOnly()
            }
        }
        maven {
            url 'https://repo.ronella.xyz/archiva/repository/snapshots/'
            credentials {
                username "${archivaUsername}"
                password "${archivaPassword}"
            }
            mavenContent {
                snapshotsOnly()
            }
        }
    }
    dependencies {
        classpath fileTree(dir: './libs/plugins', include: ['*.jar'])
    }
}
plugins {
    id "org.gosu-lang.gosu" version "6.1.0"
    id "xyz.ronella.gs-codenarc" version "2.0.0"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.3"
}

sourceCompatibility = 1.11

sourceSets {
    main {
        gosu {
            srcDirs = ['src/main/gosu']
            filter.include '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
        }
        java {
            srcDirs = ['src/main/java'] + main.gosu.srcDirs
            filter.exclude '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
        }
    }
    test {
        gosu {
            srcDirs = ['src/test/gosu']
            filter.include '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
        }
        java {
            srcDirs = ['src/test/java'] + test.gosu.srcDirs
            filter.exclude '**/*.gs', '**/*.gsx', '**/*.gst', '**/*.gsp'
        }
    }
}

repositories {
    maven {
        url 'https://repo.ronella.xyz/artifactory/java-central/'
        credentials {
            username "${artifactoryUsername}"
            password "${artifactoryPassword}"
        }
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        url 'https://repo.ronella.xyz/archiva/repository/snapshots/'
        credentials {
            username "${archivaUsername}"
            password "${archivaPassword}"
        }
        mavenContent {
            snapshotsOnly()
        }
    }
}

dependencies {
    compile group: 'org.gosu-lang.gosu', name: 'gosu-core', version: "${gosuVersion}"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile fileTree(dir: './libs/main', include: ['*.jar'])

    testCompile group: 'org.gosu-lang.gosu', name: 'gosu-test', version: "${gosuVersion}"
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
    testCompile fileTree(dir: './libs/test', include: ['*.jar'])
}

compileGosu { //Task type: org.gosulang.gradle.tasks.compile.GosuCompile
    gosuOptions.checkedArithmetic = false
    gosuOptions.failOnError = true
    gosuOptions.maxErrs = 100
    gosuOptions.maxWarns = Integer.MAX_VALUE
    gosuOptions.verbose = false
    gosuOptions.fork = true
    gosuOptions.forkOptions.with {
        memoryInitialSize = '' //'128m', '1g', etc.
        memoryMaximumSize = ''
        jvmArgs = [] //empty by default, but JAVA_OPTS environment var will be honored
        //debugging examples:
        //jvmArgs += ['-Xdebug', '-Xrunjdwp:transport=dt_shmem,address=gosuc,server=y,suspend=y'] //debug on windows
        //jvmArgs += ['-Xdebug', '-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y'] //debug on linux/OS X
    }
}

task preparePackage(dependsOn: [jar]) {
    doLast {
        def srcDir = sourceSets.main.gosu.sourceDirectories.asPath
        def destDir = Paths.get(buildDir.absolutePath, "gosu")

        copy {
            from srcDir
            into destDir
        }
    }
}

task jarGosu(dependsOn: [preparePackage]) {
    doLast {
        def srcDir = Paths.get(buildDir.absolutePath, "gosu")
        def jarFilename ="${project.name}-${version}"
        def jarGosuFile = "${jarFilename}-gosu.jar"
        def javaLibsDir = Paths.get(buildDir.absolutePath, "java-libs")
        def gosuLibsDir = Paths.get(buildDir.absolutePath, "gosu-libs")
        def outputGosuFile = Paths.get(gosuLibsDir.toFile().absolutePath, jarGosuFile)
        def libsDir = Paths.get(buildDir.absolutePath, "libs")
        def outputFile = Paths.get(libsDir.toFile().absolutePath, "${jarFilename}.jar")

        ant.zip(destfile: outputGosuFile) {
            fileset(dir: srcDir)
        }

        ant.move file: outputFile, toDir: javaLibsDir

        copy {
            from outputGosuFile
            into libsDir
            rename { filename ->
                filename.replace jarGosuFile, "${jarFilename}.jar"
            }
        }
    }
}

jar.finalizedBy(jarGosu)

